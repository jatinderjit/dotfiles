" polyglot {{{
let g:polyglot_disabled = [
  \ 'autoindent',
  \ 'python-compiler', 'python-indent', 'python',
  \ 'rust', 'go'
  \ ]
" }}}


set nocompatible


let g:python3_host_prog=$PYENV_ROOT.'/versions/generic/bin/python'
let g:loaded_ruby_provider = 0
let g:loaded_node_provider = 0
let g:loaded_perl_provider = 0

" vim-plug {{{
if has('nvim')
    if !empty($NVIM_APPNAME)
        call plug#begin('~/.config/'.$NVIM_APPNAME.'/bundle')
    else
        call plug#begin('~/.config/nvim/bundle')
    endif
else
  call plug#begin('~/.vim/bundle')
endif

Plug 'folke/which-key.nvim'

" Text {{{
Plug 'alvan/vim-closetag'
Plug 'windwp/nvim-autopairs'
Plug 'tpope/vim-abolish' " Search, subtitute: spellings, case-wise (adult->child, Adult{,s}->Child{,ren})
Plug 'tpope/vim-surround' " Use ys for motions
Plug 'tpope/vim-repeat'
Plug 'easymotion/vim-easymotion'
Plug 'lukas-reineke/indent-blankline.nvim'
Plug 'sheerun/vim-polyglot'
Plug 'terryma/vim-expand-region'  " Expand/shrink visually selected regions
" Defines new text-object based on indentation
" ii, iI: current indentation level
" ai: current indentation level and a line above
" aI: current indent level and a line above and a line below
Plug 'michaeljsmith/vim-indent-object'

if has('nvim')
  Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
endif

Plug 'kevinhwang91/promise-async'
Plug 'kevinhwang91/nvim-ufo'
" }}} Text

" Projects {{{
Plug 'nvim-tree/nvim-tree.lua'
Plug 'nvim-tree/nvim-web-devicons'  " Filetype icons (used by nvim-tree and telescope)
                                    " Requires a Patched Nerd Font (https://www.nerdfonts.com/)

Plug 'MattesGroeger/vim-bookmarks'
Plug 'tom-anders/telescope-vim-bookmarks.nvim'  " picker for MattesGroeger/vim-bookmarks

Plug 'ahmedkhalf/project.nvim'
Plug 'rmagatti/auto-session'
Plug 'rmagatti/session-lens'

" Bars, panels, and files
" Plug 'scrooloose/nerdtree'
" Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'moll/vim-bbye'  " Close buffers without messing windows layout
Plug 'majutsushi/tagbar'
Plug 'voldikss/vim-floaterm'  " Terminal manager
" }}} Projects

" Telescope {{{
Plug 'nvim-lua/popup.nvim'
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim'
Plug 'fannheyward/telescope-coc.nvim'
" TSInstall c
" TSInstall cpp
" TSInstall css
" TSInstall dart
" TSInstall go
" TSInstall html
" TSInstall java
" TSInstall rust
" TSInstall python
" TSInstall toml
" TSInstall typescript
" TSInstall tsx
" }}} Telescope

" Code Helpers {{{
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" 'coc-ultisnips'  # only when ultisnips is installed
" 'coc-smartf',
" 'coc-java',
" 'coc-omni',
" 'coc-snippets',
" 'coc-clangd',
" 'coc-explorer',
let g:coc_global_extensions = [
  \ 'coc-actions',
  \ 'coc-spell-checker',
  \ 'coc-word',
  \ 'coc-css',
  \ 'coc-flutter',
  \ 'coc-html',
  \ 'coc-json',
  \ 'coc-lists',
  \ 'coc-markdownlint',
  \ 'coc-pyright',
  \ 'coc-rust-analyzer',
  \ 'coc-tsserver',
  \ 'coc-ultisnips',
  \ 'coc-yaml',
  \ ]

Plug 'dense-analysis/ale'
Plug 'sbdchd/neoformat'
Plug 'tomtom/tcomment_vim'
Plug 'SirVer/ultisnips'    " Ultisnips engine
Plug 'honza/vim-snippets'  " Ulisnip snippets (they are separated from engine)
" Plug 'mileszs/ack.vim'     " Search in files
" Plug 'Shougo/vimproc.vim', { 'do': 'make' }  " Interactive command execution
Plug 'vim-test/vim-test'
" Plug 'mfussenegger/nvim-dap'
" Plug 'rcarriga/nvim-dap-ui'

" gS to split a one-liner into multiple lines
" gJ (with the cursor on the first line of a block) to join a block into a single-line statement.
Plug 'AndrewRadev/splitjoin.vim'  " split or join code lines

Plug 'folke/trouble.nvim'  " A pretty list for showing diagnostics, references, telescope results, quickfix and location lists

" Git plugin
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'

" Preview, stage, undo hunks: `<leader>hp`, `<leader>hs`, `<leader>hu`
" Switch between hunks: `[h` and `]h`
" Note: undo is not un-stage. That's not possible.
Plug 'airblade/vim-gitgutter'

" ChatGPT (configurable)
" `:Chat` with text selection: ChatGPT will try to complete the selected code snippet
" `:Chat some instructions` with text selection: will apply the instructions on the selected code
" `:Chat hello world` without any text selection: trigger regular chat and show response in popup
"
" `:Chat <command>` with selection: these are predefined commands:
" completion (with selection): complete the selection
" code_edit (selection + arguments): ask ChatGPT to apply the instructions on selected code
" explain (with selection): explain selected code
" doc (with selection): document the selected code
" opt (with selection): optimize the selected code
" tests (with selection): optimize the selected code
" chat (with arguments): regular chat and show response in popup
" Plug 'dpayne/CodeGPT.nvim'

" Copilot
" if has('nvim')
"     Plug 'github/copilot.vim'
" endif

" }}} Code Helpers

" Languages: {{{

" Language: Dart
Plug 'natebosch/dartlang-snippets'

" Language: Golang
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }

" Language: HTML
"    Example: div#container > header > h1 { My Site } < + br + ul#content < +
"    li*4 > a[href][target=_blank] { some link }  (then press ctrl+E)
"    Go to href, enter value and then press ctrl+N/P to navigate in hrefs
Plug 'rstacruz/sparkup', {'rtp': 'vim/'}

" Language: Lua (only for neovim config)
Plug 'folke/neodev.nvim'

" Language: Markdown
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app && yarn install'  }

" Language: JavaScript
" Plug 'ternjs/tern_for_vim', { 'for': 'javascript' }
" Plug 'pangloss/vim-javascript'  ", { 'for': 'javascript' }
" Plug 'leafgarland/typescript-vim'
" Plug 'MaxMEllon/vim-jsx-pretty'  ", { 'for': 'javascript' }
" Plug 'ianks/vim-tsx'

" Language: Terraform
" Plug 'hashivim/vim-terraform' " Part of vim-polyglot
" }}} Languages

" Colorscheme: {{{
Plug 'morhetz/gruvbox'
" Plug 'vim-scripts/wombat256.vim'
Plug 'NLKNguyen/papercolor-theme'
Plug 'rakr/vim-one'
Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'altercation/vim-colors-solarized'
Plug 'catppuccin/nvim', { 'as': 'catppuccin' }
Plug 'folke/tokyonight.nvim'
" onehalflight and onehalfdark, also airline_theme
Plug 'sonph/onehalf', { 'rtp': 'vim' }
Plug 'AstroNvim/astrotheme'
" }}} Colorscheme

call plug#end()

" }}}

" unmanaged plugins {{{
" SearchComplete.vim  http://www.vim.org/scripts/script.php?script_id=474
runtime macros/matchit.vim  " 3  for jumping between tags with %
" }}}

" General {{{
" With a map leader it's possible to do extra key combinations
" let mapleader = "\\"
" let g:mapleader = "\\"
let mapleader = " "
let g:mapleader = " "
set tm=1000                                   " Set leader key timeout
nnoremap <leader>w <cmd>w<cr>
nnoremap <leader>q <cmd>q<cr>
" nnoremap <leader>c :bdelete<CR>             " Close buffer and quit window
nnoremap <leader>c <cmd>Bdelete<CR>           " Close buffer and maintain window
nnoremap <leader>x <cmd>x<cr>                 " Fast save & quit
set noerrorbells                              " No annoying sound on errors
set vb t_vb=                                  " No annoying sound on errors
set backspace=indent,eol,start                " allow backspacing over everything in insert mode
set autoindent                                " always set autoindenting on
set copyindent                                " copy the previous indentation on autoindenting
set smartindent
set shiftwidth=4                              " number of spaces to use for autoindenting
set expandtab                                 " use appropriate number of spaces when tabbing
set tabstop=4                                 " a tab is four spaces
set shiftround                                " use multiple of shiftwidth when indenting with '<' and '>'
set showmatch                                 " set show matching parenthesis
set mat=2                                     " How many tenths of a second to blink when matching brackets
set ignorecase                                " ignore case when searching
set smartcase                                 " ignore case if search pattern is all lowercase, case-sensitive otherwise
set smarttab                                  " insert tabs on the start of a line according to shiftwidth, not tabstop
set hlsearch                                  " highlight search terms
set incsearch                                 " show search matches as you type
set history=1000                              " remember more commands and search history
set undolevels=1000                           " use many muchos levels of undo
set wildignore=*.swp,*.bak,*.pyc,*.class,*.o
" set autoread                                  " Set to auto read when a file is changed from the outside
set title                                     " change the terminal's title
set ruler                                     " show the cursor position all the time
set pastetoggle=<F2>                          " toggle paste mode
set magic                                     " For regular expressions turn magic on
set lazyredraw                                " Don't redraw while executing macros (good performance config)
set so=7                                      " ScrollOff - set 7 lines to the cursor - when moving vertically using j/k
set colorcolumn=80                            " Highlight column 81 to help keep lines of code 80 characters or less
" set cursorline                                " Highlight current line
set mouse=a
set number
nmap <f3> :set number! number?<cr>            " toggle showing line numbers
set list
set listchars=tab:>\ ,trail:-,extends:#,precedes:<,nbsp:+ " highlight whitespace
nmap <silent> <Leader>= :nohlsearch <CR>      " unhighlight search
set viminfo='20,\"50
                  " Tell vim to remember certain things when we exit
"set autochdir    " automatically changes directory to file in buffer

" Cool tab completion stuff while entering commands
set wildmenu
set wildmode=list:longest,full

"save files if you forgot to sudo
cmap w!! %!sudo tee > /dev/null %

" Font ligatures
" set macligatures
set guifont="Fira Code Nerd Font:h14"
" }}}

" {{{ Folds and wraps

set foldmethod=indent  " Use indentation for folds
set foldnestmax=5      " Deepest fold level
set foldlevel=99
set foldlevelstart=99
set foldcolumn=0
set foldlevel=0
" set nofoldenable    " dont fold by default
set foldenable

augroup vimrcFold
  " fold vimrc itself by categories
  autocmd!
  autocmd FileType vim set foldmethod=marker
  autocmd FileType vim set foldlevel=0
augroup END

" Wrap text at 80 characters. To wrap existing lines: `gq`
autocmd BufRead,BufNewFile *.md setlocal textwidth=80

" }}}

" Files, backups and undo {{{

" Turn backup off, since most stuff is in git etc anyway...
set nobackup
set nowritebackup
set nowb
set noswapfile
" store backup and swp files in these dirs to not clutter working dir
set backupdir=~/.vim/backup
set directory=~/.vim/tmp

" restore undo/redo tree
" set undofile
" set undodir=~/.vim/undodir

" }}}

" Open file prompt with current path
nmap <leader>e :e <C-R>=expand("%:p:h") . '/'<CR>
" Location List
nnoremap LN :lnext<CR>
nnoremap LP :lprevious<CR>

" make < > shifts keep selection
vnoremap < <gv
vnoremap > >gv

" replace within selection only
vnoremap :s :s/\%V

" Ctrl+V (block select) is hijacked by windows terminal for paste
nnoremap cv <C-v>

" Panic Button
nnoremap <f9> mZggg?G`Z

" Keep the cursor in place while joining lines
" nnoremap J mZJ`Z
inoremap jk <ESC>

" Select (charwise) the contents of the current line, excluding indentation.
nnoremap vv ^vg_

" Heresy
inoremap <c-a> <esc>I
inoremap <c-e> <esc>A

" Insert blank line before/after cursor
nnoremap [<space> mXO<ESC>`X
nnoremap ]<space> mXo<ESC>`X

" gi already moves to 'last place you exited insert mode', so we'll map gI to
" something similar: move to last change
nnoremap gI `.

" Cut/Copy/Paste from last copy/selection in/out of vim
" inoremap <C-v> <ESC>mXo<ESC>mYk"+P'YddmY
nnoremap <leader>y "+y
nnoremap <leader>Y "+Y
nnoremap <leader>d "+d
nnoremap <leader>D "+D
nnoremap <leader>p "+p
nnoremap <leader>P "+P
vnoremap <leader>y "+y
vnoremap <leader>Y "+Y
vnoremap <leader>d "+d
vnoremap <leader>D "+D

" Easy window navigation
" map <C-h> <C-w>h
" map <C-j> <C-w>j
" map <C-k> <C-w>k
" map <C-l> <C-w>l

" Navigating in wrapped lines
nnoremap j gj
vnoremap j gj
nnoremap k gk
vnoremap k gk
nnoremap gj j
nnoremap gk k
vnoremap gj j
vnoremap gk k

" Buffer Navigation
nnoremap <c-j> :bp<CR>
nnoremap <c-k> :bn<CR>
" Go to previous tab (using CtrlP)
nmap <leader>i <c-p><CR>

"fix syntax highlighting for long files
autocmd BufEnter * :syntax sync minlines=200

"show current command in bottom line
set showcmd
set cmdheight=2
set laststatus=2

" Search mappings: These will make it so that going to the next one in a
" search will center on the line it's found in.
nmap N Nzz
nmap n nzz

set grepprg=grep\ -nH\ $*

" CoC {{{

" CoC General {{{

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=yes

function! g:CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice
" inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
"                               \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
inoremap <silent><expr> <cr> coc#pum#visible() ? coc#pum#confirm() :
  \ "\<C-g>u\<c-r>=v:lua.require'nvim-autopairs'.autopairs_cr()\<CR>"

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()


" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

nnoremap T :call CocActionAsync('doHover')<CR>

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nnoremap <leader>rn <Plug>(coc-rename)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying code actions to the selected code block
" Example: `<leader>aap` for current paragraph
xnoremap <leader>a  <Plug>(coc-codeaction-selected)
nnoremap <M-a>  <Plug>(coc-codeaction-cursor)
" Remap keys for apply code actions affect whole buffer
nnoremap <leader>as  <Plug>(coc-codeaction-source)
" Apply the most preferred quickfix action to fix diagnostic on the current line
nnoremap <leader>af  <Plug>(coc-fix-current)

" Remap keys for applying refactor code actions
nnoremap <silent> <leader>re <Plug>(coc-codeaction-refactor)
xnoremap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)
vnoremap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)

" Introduce function text object
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> to scroll float windows/popups
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif


" Use CTRL-S for selections ranges
" Requires 'textDocument/selectionRange' support of language server
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocActionAsync('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
" CoC General }}}

" CoC Extensions {{{
" Mappings using CoCList:
" Show all diagnostics
" nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
" nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands
" nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
" nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
" nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

" unmap <C-i>

" coc-actions
" Remap for do codeAction of selected region
function! s:cocActionsOpenFromSelected(type) abort
  execute 'CocCommand actions.open ' . a:type
endfunction
" xmap <silent> <leader>a :<C-u>execute 'CocCommand actions.open ' . visualmode()<CR>
" nmap <silent> <leader>a :<C-u>set operatorfunc=<SID>cocActionsOpenFromSelected<CR>g@

" coc-snippets
" imap <tab> <Plug>(coc-snippets-expand)
" let g:coc_snippet_next = '<TAB>'
" let g:coc_snippet_prev = '<S-TAB>'
" let g:coc_snippet_next = '<C-f>'
" let g:coc_snippet_prev = '<C-b>'

" CoC Extensions }}}

" CoC }}}

" Markdown {{{
autocmd Filetype markdown nnoremap <leader>mp :MarkdownPreview<CR>
" Markdown }}}

" Python {{{
autocmd Filetype python nnoremap <c-f10> o.frontend.terminal.embed import InteractiveShellEmbed<ESC>Ifrom IPython<ESC>oInteractiveShellEmbed()()<ESC>
autocmd Filetype python nnoremap <f10> o__import__('ipdb').set_trace()<ESC>
autocmd Filetype python setlocal colorcolumn=80
" autocmd BufWritePost *.py !autopep8 -i expand("%")
" au FileType python setlocal formatprg=autopep8\ -
" Python }}}
"
" Ruby {{{
autocmd FileType ruby setlocal expandtab shiftwidth=2 tabstop=2
autocmd FileType eruby setlocal expandtab shiftwidth=2 tabstop=2
" }}}

" Clisp {{{
autocmd Filetype lisp setlocal ts=2 sts=2 sw=2
" }}}

" asciidoctor {{{
autocmd Filetype asciidoctor setlocal spell spelllang=en_gb
autocmd Filetype asciidoctor setlocal colorcolumn=80
autocmd Filetype asciidoc setlocal spell spelllang=en_gb
autocmd Filetype asciidoc setlocal colorcolumn=80
" }}}

" Errors (for error type quickfix)
map <C-n> :cnext<CR>
map <C-m> :cprevious<CR>
" nnoremap <leader>a :cclose<CR>

" Elm {{{
" autocmd Filetype elm nnoremap <leader>el :ElmEvalLine<CR>
" autocmd Filetype elm vnoremap <leader>es :<C-u>ElmEvalSelection<CR>
" autocmd Filetype elm nnoremap <leader>em :ElmMakeCurrentFile<CR>
" :au BufWritePost *.elm ElmMakeCurrentFile         " Compile current file on write
" }}}

" Javascript {{{
"autocmd Filetype javascript setlocal ts=2 sts=2 sw=2
" }}}

" Trouble {{{
nnoremap <leader>xx <cmd>TroubleToggle<cr>
nnoremap <leader>xw <cmd>TroubleToggle workspace_diagnostics<cr>
nnoremap <leader>xd <cmd>TroubleToggle document_diagnostics<cr>
nnoremap <leader>xq <cmd>TroubleToggle quickfix<cr>
nnoremap <leader>xl <cmd>TroubleToggle loclist<cr>
nnoremap gR <cmd>TroubleToggle lsp_references<cr>
" }}}

if has("autocmd")
  " When editing a file, always jump to the last cursor position
  autocmd BufReadPost *
  \ if line("'\"") > 0 && line ("'\"") <= line("$") |
  \   exe "normal! g'\"" |
  \ endif
endif

" Use system clipboard (only works if compiled with +x)
" set clipboard=unnamed

set guicursor=n-v-c:block-Cursor
set guicursor+=i:ver100-iCursor " Vertical bar in insert mode
set guicursor+=n-v-c:blinkon0  " Don't blink cursor in normal, visual and command mode
set guicursor+=i:blinkwait10

" Colors and Fonts {{{

" set t_Co=256

"Credit joshdick
"Use 24-bit (true-color) mode in Vim/Neovim when outside tmux.
"If you're using tmux version 2.2 or later, you can remove the outermost $TMUX check and use tmux's 24-bit color support
"(see < http://sunaku.github.io/tmux-24bit-color.html#usage > for more information.)
if (empty($TMUX))
  if (has("nvim"))
  "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  endif
  " For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
  " Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
  " < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >

  if (has("termguicolors"))
    set termguicolors
  endif
endif

" Cursor colors are updated only if termguicolors is set
" But this changes color outside vim as well!
" https://github.com/neovim/neovim/wiki/FAQ#cursor-style-isnt-restored-after-exiting-or-suspending-and-resuming-nvim
" set termguicolors

" light thems: delek, morning, onehalflight, solarized
" dark themes: dracula, PaperColor, default, onehalfdark, solarized
colorscheme tokyonight-moon
" set background=light
let g:one_allow_italics = 1  " For colorscheme one

" wombat256mod {{{
" colorscheme wombat256mod
" Adjust signscolumn to match wombat
hi! link SignColumn LineNr

" Use pleasant but very visible search hilighting
" hi Search ctermfg=white ctermbg=173 cterm=none guifg=#ffffff guibg=#e5786d gui=none
" hi! link Visual Search

" Match wombat colors in nerd tree
" hi Directory guifg=#8ac6f2

" Searing red very visible cursor
" hi Cursor guibg=red

" wombat256mod }}}

" Colors and Fonts }}}

" Set utf8 as standard encoding and en_US as the standard language
if !has('nvim')
  " Only set this for vim, since neovim is utf8 as default and setting it
  " causes problems when reloading the .vimrc configuration
  set encoding=utf8
endif

" Use Unix as the standard file type
set ffs=unix,dos,mac

" Use large font by default in MacVim
set gfn=Monaco:h19

" }}}

" Spell check {{{

" Pressing <leader>ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>

" Guide:
" set language: set spell spelllang=en_gb
" movement: ]s or [s
" spelling options: z=
" add to dictionary: zg

" Spell check }}}

syn match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

" Filetype Templates
autocmd BufNewFile *.c 0r ~/.vim/filetype-templates/skeleton.c
autocmd BufNewFile *.cpp 0r ~/.vim/filetype-templates/skeleton.cpp
autocmd BufNewFile *.tex 0r ~/.vim/filetype-templates/skeleton.tex
autocmd BufNewFile *.html 0r ~/.vim/filetype-templates/skeleton.html

" Store macros
let @q='+i"f=s": '      " Convert python function keyword arguments to dictionary
let @d='f[cs])i.get'      " Change x['a'] to x.get('a')

" Formatters  {{{
au FileType javascript setlocal formatprg=prettier\ --write
au FileType javascript.jsx setlocal formatprg=prettier\ --write
au FileType typescript setlocal formatprg=prettier\ --write
au FileType typescript.tsx setlocal formatprg=prettier\ --write
au FileType html setlocal formatprg=js-beautify\ --type\ html
au FileType scss setlocal formatprg=prettier\ --parser\ css
au FileType css setlocal formatprg=prettier\ --parser\ css
au FileType rust setlocal formatprg=rustfmt
" Formatters  }}}

"Switch between buffers without saving
set hidden
map <F6> :ls<CR>:b<space>

" Need to figure tab stuff some day
"tabs
" map <C-S-tab> :tabprevious<CR>
" map <C-tab> :tabnext<CR>
"map th :tabfirst<CR>
"map <s-z> :tabnext<CR>
"map <s-a> :tabprev<CR>
"map tl :tablast<CR>
"map tt :tabfind<CR>
"map tn :tabnext<Space>
"map tm :tabm<Space>

autocmd BufReadPre *.js let b:javascript_lib_use_jquery = 1
autocmd BufReadPre *.js let b:javascript_lib_use_underscore = 0
autocmd BufReadPre *.js let b:javascript_lib_use_backbone = 0
autocmd BufReadPre *.js let b:javascript_lib_use_prelude = 0
autocmd BufReadPre *.js let b:javascript_lib_use_angularjs = 1
autocmd BufReadPre *.[jt]s,*.[jt]sx set tabstop=2
autocmd BufReadPre *.[jt]s,*.[jt]sx set shiftwidth=2



" Visual mode {{{
" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
function! CmdLine(str)
    exe "menu Foo.Bar :" . a:str
    emenu Foo.Bar
    unmenu Foo
endfunction

function! VisualSelection(direction) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
        call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*.')
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    elseif a:direction == 'f'
        execute "normal /" . l:pattern . "^M"
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction
vnoremap <silent> * :call VisualSelection('f')<CR>
vnoremap <silent> # :call VisualSelection('b')<CR>
" Visual mode }}}

" Status line {{{

" Returns true if paste mode is enabled
function! HasPaste()
    if &paste
        return 'PASTE MODE  '
    en
    return ''
endfunction

" Always show the status line
set laststatus=2

" Format the status line
" set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l

" Status line }}}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Editing mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Move a line of text using <Alt>+[jk]
" nmap <A-j> mX:m+<cr>`X
" nmap <A-k> mX:m-2<cr>`X
vmap <A-j> :m'>+<cr>`<mY`>mXgv`Yo`X
vmap <A-k> :m'<-2<cr>`>mY`<mXgv`Yo`X

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Hack to use Alt key shortcuts
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" let c='a'
" while c <= 'z'
"   exec "set <A-".c.">=\e".c
"   exec "imap \e".c." <A-".c.">"
"   let c = nr2char(1+char2nr(c))
" endw
"
" set timeout ttimeoutlen=50

" Settings {{{

" FileType {{{
autocmd BufNewFile,BufRead */.ssh/config.d/* setfiletype sshconfig
autocmd BufNewFile,BufRead coc-settings.json setlocal filetype=jsonc
autocmd BufNewFile,BufRead tsconfig.json setlocal filetype=jsonc
autocmd BufNewFile,BufRead .vscode/*.json setlocal filetype=jsonc
" autocmd BufNewFile,BufRead *.asm set filetype=nasm
" }}}

" ale {{{
" Use CoC for LSP
let g:ale_disable_lsp = 1
" }}}

" ctrp {{{
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlPBuffer'
let g:ctrlp_working_path_mode = 'ra'  " r->nearest ancestor with .git .hg .svn; a-> else current dir
" g:ctrlp_custom_ignore is ignored if g:ctrlp_user_command is set
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\(.git|.hg|.svn|node_modules|bower_components|.cabal-sandbox|.stack-work)$',
  \ 'file': '\v\.(exe|so|dll|map|woff2?|eot|ttf)$',
  \ }
let g:ctrlp_cache_dir = $HOME.'/.cache/ctrlp'
let g:ctrlp_use_caching = 1
" let g:ctrlp_user_command = 'ag %s -l --nocolor -g "" --ignore node_modules --ignore bower_components --ignore "*.map" --ignore "*.eot" --ignore "*.woff" --ignore "*.woff2" --ignore "*.eot" --ignore "*.ttf" --ignore __pycache__ --ignore "*.pyc"'
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']
nmap <c-l> :CtrlPRoot<cr>
" }}}

" airline {{{
let g:airline_powerline_fonts = 1
" let g:airline_theme='light'
" tabline: enables vim tabs
" branch: shows current git branch
let g:airline_extensions = ['ctrlp', 'coc', 'tabline', 'tagbar', 'branch']
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline#extensions#coc#enabled = 1
let g:airline#extensions#coc#error_symbol = 'E:'
let g:airline#extensions#coc#warning_symbol = 'W:'
let g:airline#extensions#coc#show_coc_status = 1
let g:airline#extensions#coc#stl_format_err = '%C(L%L)'
" change the warning format (%C - error count, %L - line number): >
let airline#extensions#coc#stl_format_warn = '%C(L%L)'
" let g:airline#extensions#tabline#enabled = 1
" let g:airline#extensions#tabline#left_sep = ''
" let g:airline#extensions#tabline#left_alt_sep = ''
let g:airline_symbols.paste = 'ρ'
" let g:airline_symbols.notexists = '∄'
" let g:airline_symbols.whitespace = 'Ξ'
" }}}

" vim-test {{{
nmap <silent> t<C-n> :TestNearest<CR>
nmap <silent> t<C-f> :TestFile<CR>
nmap <silent> t<C-s> :TestSuite<CR>
nmap <silent> t<C-l> :TestLast<CR>
nmap <silent> t<C-g> :TestVisit<CR>
let test#strategy = "floaterm"
" }}}

" tcomment {{{
" let g:tcommentGuessFileType_htmldjango = 1
let g:tcomment#filetype#guess_htmldjango = 1
nmap <D-/> gcc
vmap <D-/> gc
nmap <C-/> gcc
vmap <C-/> gc
" }}}

" latex suite {{{
let g:tex_flavor='latex'
let g:Tex_CompileRule_pdf = 'pdflatex -interaction=nonstopmode $*'
let g:Tex_DefaultTargetFormat = 'pdf'
let g:Tex_MultipleCompileFormats='pdf, aux'
" }}}

" close-tag {{{
let g:closetag_filenames = '*.html,*.xhtml,*.phtml,*.jsx,*.tsx'
" }}}

" Ultisnip {{{
let g:UltiSnipsExpandTrigger="\\<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-v>"
" }}}

" Language: golang / vim-go {{{
let g:go_def_mapping_enabled = 0  " disable 'gd' to be handled by CoC
let g:go_def_mode='gopls'
let g:go_info_mode='gopls'
let g:go_list_type = "quickfix"
let g:go_test_timeout = '10s'
let g:go_fmt_command = "goimports"                  " automatically format and rewrite import declarations on save
let g:go_fmt_fail_silently = 1                      " show errors on save
autocmd BufWritePre *.go :call CocAction('runCommand', 'editor.action.organizeImport')
" let g:go_auto_type_info = 1               " Provide info about the object cursor is on
" let g:go_auto_sameids = 1                 " Highlight the variable (cursor is on) everywhere
" Shortcuts:
" gd or Ctrl-] : GoDef   (Ctrl-t to go to previous location :GoDefPop)
"
" let g:go_fmt_autosave = 0
" au BufRead,BufNewFile *.go set filetype=go
" " autocmd Filetype go nmap <leader>b <Plug>(go-build)
" autocmd Filetype go nmap <leader>r <Plug>(go-run)
" autocmd Filetype go nmap <leader>t <Plug>(go-test)
" " run :GoBuild or :GoTestCompile based on go file
" function! s:build_go_files()
"     let l:file = expand('%')
"     if l:file =~# '^\f\+_test\.go$'
"         call go#cmd#Test(0, 1)
"     elseif l:file =~# '^\f\+\.go$'
"         call go#cmd#Build(0)
"     endif
" endfunction
" autocmd Filetype go nmap <leader>b :<C-u>call <SID>build_go_files()<CR>
" autocmd Filetype go nmap <leader>c <Plug>(go-coverage-toggle)
" autocmd Filetype go nmap <leader>i <Plug>(go-info)
" autocmd Filetype go set autowrite           " autosave on :GoBuild
" }}}

" elm-vim {{{
let g:elm_format_autosave = 1
" }}}

" ack.vim {{{
" let g:ackprg = 'ag --vimgrep'
" nnoremap <leader>a :Ack!<Space>
" }}}

" neoformat {{{
" let g:neoformat_python_autopep8 = {
"             \ 'exe': 'autopep8',
"             \ 'args': ['-s 4', '-E'],
"             \ 'replace': 1, " replace the file, instead of updating buffer (default: 0)
"             \ 'stdin': 1, " send data to stdin of formatter (default: 0)
"             \ 'no_append': 1,
"             \ }
" let g:neoformat_python_black = {
"             \ 'exe': 'black',
"             \  'stdin': 1,
"             \ 'args': ['--line-length', '110', '-', '2>/dev/null'],
"             \ }
let g:neoformat_enabled_python = ['black']
" let g:neoformat_try_formatprg = 1
let g:neoformat_run_all_formatters = 1
autocmd BufWritePre *.html Neoformat
autocmd BufWritePre *.css Neoformat
autocmd BufWritePre *.js Neoformat
autocmd BufWritePre *.ts Neoformat
autocmd BufWritePre *.jsx Neoformat
autocmd BufWritePre *.tsx Neoformat
autocmd BufWritePre *.json Neoformat
autocmd BufWritePre *.py Neoformat
autocmd BufWritePre *.rs Neoformat
" autocmd BufWritePre *.go Neoformat
" }}}

" tagbar {{{
nmap <F8> :TagbarToggle<CR>

set tags=tags;/
" set cst
" set csverb
" }}}

" dart {{{
let g:dart_format_on_save = 1
let g:dart_style_guide = 2
" }}}

" lsc {{{
let g:lsc_auto_map = v:true
" }}}

" markdown-preview {{{
let g:mkdp_refresh_slow = 1
let g:mkdp_auto_close = 0
" }}}

" telescope {{{
nnoremap <leader>fr <cmd>Telescope resume<CR>
nnoremap <leader>ff <cmd>Telescope current_buffer_fuzzy_find<CR>
nnoremap <leader>fb <cmd>Telescope vim_bookmarks all<CR>
nnoremap <leader>fh <cmd>Telescope help_tags<CR>
" Find git conflicts
nmap <leader>fc <leader>fg<<<<<<ESC>
" nnoremap <leader>fc <cmd>Telescope colorscheme<CR>
" nnoremap <leader>fk <cmd>Telescope keymaps<CR>
nnoremap <leader>fs <cmd>Telescope session-lens<CR>
nnoremap <leader>ft <cmd>Telescope<CR>
nnoremap <c-s-p> <cmd>Telescope commands<cr>
" telescope }}}

" terminal {{{
tnoremap <Esc><Esc> <C-\><C-n>

let g:floaterm_keymap_new = '<M-t>'
let g:floaterm_keymap_prev = '<M-j>'
let g:floaterm_keymap_next = '<M-k>'
" let g:floaterm_keymap_first
" let g:floaterm_keymap_last
" let g:floaterm_keymap_hide
" let g:floaterm_keymap_show
" let g:floaterm_keymap_kill
let g:floaterm_keymap_toggle = '<M-3>'
let g:floaterm_opener='edit'
let g:floaterm_width=0.6
let g:floaterm_height=1.0
let floaterm_position="right"
let g:floaterm_shell="/opt/homebrew/bin/zsh"

" Close terminal
nnoremap <M-d> A<C-u><C-d>
tnoremap <M-d> <C-\><C-n>A<C-u><C-d>

" Keyboard bindings: https://github.com/jesseduffield/lazygit/blob/master/docs/keybindings/Keybindings_en.md
nnoremap <C-g> :FloatermNew --height=0.8 --width=0.8 lazygit<CR>
" Use telescope instead
" nnoremap <leader>ff :FloatermNew fzf<CR>
vnoremap <leader>fs :'<,'>FloatermSend<CR>:FloatermToggle<CR>
" nnoremap <leader>fa :%FloatermSend<CR>:FloatermToggle<CR>
nnoremap <leader>fj :FloatermNew --autoclose=0 just
" autocmd Filetype python nnoremap <leader>fe :FloatermNew --width=0.8 --height=0.8 --autoclose=0 python3 '%'<CR>
autocmd Filetype python nnoremap <leader>fe :FloatermNew --autoclose=0 python3 '%'<CR>
" }}}

" vim-expand-region {{{
vnoremap + <Plug>(expand_region_expand)
vnoremap _ <Plug>(expand_region_shrink)
" vim-expand-region }}}

" nvim-tree {{{
" lua require("nvim-tree").setup()
nnoremap <m-e> :NvimTreeFocus<CR>
nnoremap <m-E> :NvimTreeToggle<CR>
" }}}

" vim-bookmarks {{{
let g:bookmark_save_per_working_dir = 1
let g:bookmark_auto_save = 1
let g:bookmark_show_warning = 1
" }}} vim-bookmarks

" git-gutter {{{
nmap ]h <Plug>(GitGutterNextHunk)zz
nmap [h <Plug>(GitGutterPrevHunk)zz
" }}}

" Settings }}}

" Rupee character (char code: \u20B9, insert it by <C-v>U20B9<space>)
abbreviate Rs. ₹
abbreviate zrs ₹
abbreviate zstar ⭐
