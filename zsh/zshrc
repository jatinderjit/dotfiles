# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="robbyrussell"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
export NVM_DIR="/opt/nvm"
plugins=(
    git
    # python
    pip
    # poetry
    zsh-autosuggestions
    zsh-syntax-highlighting
    history-substring-search
    # you-should-use
    z.lua
    fzf
    rust
    eza
    nvm
)

source $ZSH/oh-my-zsh.sh

export LANG=en_US.UTF-8

if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR='vim'
else
  export EDITOR='nvim'
fi

# Compilation flags (Rosetta)
alias arch86='arch -x86_64'

### Fix slowness of pastes with zsh-syntax-highlighting.zsh #########
pasteinit() {                                                       #
  OLD_SELF_INSERT=${${(s.:.)widgets[self-insert]}[2,3]}             #
  # I wonder if you'd need `.url-quote-magic`?                      #
  zle -N self-insert url-quote-magic                                #
}                                                                   #
                                                                    #
pastefinish() {                                                     #
  zle -N self-insert $OLD_SELF_INSERT                               #
}                                                                   #
zstyle :bracketed-paste-magic paste-init pasteinit                  #
zstyle :bracketed-paste-magic paste-finish pastefinish              #
### End: Fix slowness of pastes #####################################

######################## Start: ZSH Vim mode  ###########################
# bindkey -v                                                            #
# export KEYTIMEOUT=1                                                   #
# cursor_mode() {                                                       #
#     # See https://ttssh2.osdn.jp/manual/4/en/usage/tips/vim.html      #
#     # for cursor shapes                                               #
#     cursor_block='\e[2 q'                                             #
#     cursor_beam='\e[6 q'                                              #
#                                                                       #
#     function zle-keymap-select {                                      #
#         if [[ ${KEYMAP} == vicmd ]] ||                                #
#             [[ $1 = 'block' ]]; then                                  #
#             echo -ne $cursor_block                                    #
#         elif [[ ${KEYMAP} == main ]] ||                               #
#             [[ ${KEYMAP} == viins ]] ||                               #
#             [[ ${KEYMAP} = '' ]] ||                                   #
#             [[ $1 = 'beam' ]]; then                                   #
#             echo -ne $cursor_beam                                     #
#         fi                                                            #
#     }                                                                 #
#                                                                       #
#     zle-line-init() {                                                 #
#         echo -ne $cursor_beam                                         #
#     }                                                                 #
#                                                                       #
#     zle -N zle-keymap-select                                          #
#     zle -N zle-line-init                                              #
# }                                                                     #
#                                                                       #
# cursor_mode                                                           #
#                                                                       #
# zmodload zsh/complist                                                 #
# bindkey -M menuselect 'h' vi-backward-char                            #
# bindkey -M menuselect 'k' vi-up-line-or-history                       #
# bindkey -M menuselect 'l' vi-forward-char                             #
# bindkey -M menuselect 'j' vi-down-line-or-history                     #
######################## End:   ZSH Vim mode  ###########################

# Git aliases
alias gap='git add --patch'
alias gl='git log'
alias glp='git log --patch'
alias gdc='git diff --cached'
alias gst2='git status -uno'  # Don't show untracked files
unalias gco
gco() {
  echo "Use \`git switch\` or \`git restore\`";
}
gh () {
  git clone "git@github.com:$1.git" $2
}
# unalias gr

alias vim="nvim"
alias v=vim
alias vn="vim -u NONE"  # No plugins, no configurations
alias vm="vim -u ~/.minimal.vimrc"  # No plugins
alias vd="vim -d"

alias -s git='git clone'
alias ls='eza --icons=always'

alias cat="bat"  # --theme=1337"
export MANPAGER="sh -c 'col -bx | bat --theme=Dracula -l man -p'"

alias rgn='rg --no-ignore'  # to ignore .gitignore (and other ignore files)
alias rgf='rg --files-with-matches'  # or `rg -l` just print filenames
alias rgi='rg -i'

alias -g G='| rg'  # global alias (substitute anywhere in a command)
alias -g Gi='G -i'  # global alias (substitute anywhere in a command)

# Useful to incrementally filter files
# Example: `rgf -i query1 Fi query2 Fi query`
alias -g F='| tr "\n" "\0" | xargs -0 rg -l'
alias -g Fi='F -i'

alias fdn='fd --no-ignore'
alias fdi='fd -i'

alias pyserver='$PYENV_ROOT/versions/generic/bin/python -m http.server'
alias djtest='py manage.py test'

alias f=floaterm

sp() {
    if [ -z "$1" ]; then
        vim $HOME/tmp/scratchpad
    else
        vim "$HOME/tmp/scratchpad.$1"
    fi
}


# cd into a python package's import path
# Example: `pycd django` will drop you in the Django's root directory.
pycd() {
    DIR=$(python -c "import os, $1; print(os.sep.join($1.__file__.split(os.sep)[:-1]))")
    pushd $DIR
}

# direnv (directory based environment variables)
#
# Create an .envrc file in the required directory
# One time: `direnv allow .` (to mark the current directory safe to load)
#
# Utils: PATH_add function: prepend path to $PATH
# Other helper functions: https://direnv.net/man/direnv-stdlib.1.html
#
# Create your own extensions by creating a bash file at the path
# `~/.config/direnv/direnvrc` or `~/.config/direnv/lib/*.sh`. This will be
# loaded before loading an .envrc.
eval "$(direnv hook zsh)"

mov_to_mp4() {
    ffmpeg -i $1 -q:v 0 $2
}

#TODO: check why ipython, pip was aliased
# unalias ipython
unalias pip  # aliased to 'noglob pip'

# Open ipython if called without args
py() {
  if [ $# -eq 0 ]; then
    ipython
  else
    python $*
  fi
}

# Open irb if called without args
rb() {
  if [ $# -eq 0 ]; then
    irb
  else
    ruby $*
  fi
}

alias j=just

# export CDPATH="$HOME/projects"  # This doesn't play well with /bin/sh
export JAVA_HOME="/Applications/Android Studio.app/Contents/jre/Contents/Home"

export PATH="$PATH:/opt/homebrew/opt/openssl@3/bin"
export PATH="$PATH:/opt/homebrew/opt/ruby/bin"
export PATH="$PATH:/Applications/Android Studio.app/Contents/jre/Contents/Home/bin"
export PATH="$PATH:$HOME/.local/bin"
export PATH="$PATH:/opt/flutter/bin"
export PATH="$PATH:$HOME/Library/Android/sdk/platform-tools"
export PATH="$PATH:$HOME/go/bin"
export PATH="$PATH:/opt/dasm"

# fzf uses:
# * <Ctrl-R>: backwards history search
# * <Alt-C> / <Option-C>: fuzzy cd
# * vim $(find . '/' | fzf): For finding random config files
#
# * vim **<TAB> (or vim query**<TAB>): find and open
# * Autocompletes auther commands as well (try `ssh **<TAB>`)
#
# rg . | fzf                            # Search in every file!
# rg . | fzf | cut -d ":" -f 1          # live search and print file name
# vim $(rg . | fzf | cut -d ":" -f 1)   # live search, and open file
export PATH="$PATH:/opt/homebrew/opt/fzf/bin"

# Creates a virtualenv (venv folder) in the current directory
venv() {
    # xargs trims the whitespace
    SRC=$1
    if [[ -z $SRC ]]; then
        SRC=$(pyenv versions | rg -v '\-\->' | rg -v system | fzf | xargs)
    fi
    if [[ -z $SRC ]]; then
        echo "Please select a version"
        return
    fi
    PY_VERSIONS="$(pyenv root)/versions"
    eval "$PY_VERSIONS/generic/bin/virtualenv --python=$PY_VERSIONS/$SRC/bin/python venv"
    cat >> justfile <<- EOM
python *ARGS:
    ./venv/bin/python {{ ARGS }}

alias py := python

pip *ARGS:
    ./venv/bin/pip {{ ARGS }}

install *ARGS:
    ./venv/bin/pip install {{ ARGS }}

uninstall *ARGS:
    ./venv/bin/pip uninstall {{ ARGS }}

bin bin *ARGS:
    "./venv/bin/{{ bin }}" {{ ARGS }}

vim *ARGS:
    #!/usr/bin/env zsh
    PATH="\$(pwd)/venv/bin:\$PATH" nvim {{ ARGS }}

alias v := vim
EOM
}

# To enable gpg signing (git commits)
export GPG_TTY=$(tty)

source ~/.iterm2_shell_integration.zsh

# cd into the current git repository's root
0() {
    local PROJ_ROOT=$(git rev-parse --show-toplevel)
    cd $PROJ_ROOT
}

disk_usage() {
    df -h | sd 'Mounted on' 'Mounted_on' | choose 0.. -o ',' | rg 'Filesystem|disk3s5' | sd 'Mounted_on' 'Mounted on' | csview
}

alias nx='npx nx'

eval "$(starship init zsh)"

eval "$(rbenv init - zsh)"

# export ASDF_DIR="/opt/asdf"
# export ASDF_CONFIG_FILE="$HOME/.config/asdf/asdfrc"
# export ASDF_DATA_DIR="$HOME/.config/asdf/data"
# . "${ASDF_DIR}/asdf.sh"
# fpath=(${ASDF_DIR}/completions $fpath)
# autoload -Uz compinit && compinit

export PATH="$PATH:/Applications/Racket v8.9/bin"

# bun completions
[ -s "$HOME/.bun/_bun" ] && source "$HOME/.bun/_bun"

# bun
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"

# OCR: Copy to clipboard
# Ref: https://blog.greg.technology/2024/01/02/how-do-you-ocr-on-a-mac.html
alias ocr='shortcuts run ocr-text -i'

# Notify after a long running task completes
# Example: `make build && notify "Built!"`
notify () {
    osascript -e "display notification \"$2\" with title \"$1\" sound name \"Glass\""
}

# Popup to ask for user confirmation.
# Helpful in a long-running multi-stage script, as it steals the focus.
confirm() {
    if [ $# -eq 0 ]; then
        echo "Enter date (example: $(date '+%d-%b-%Y'))"
        return 1
    fi
    osascript -e "display dialog \"$1\"" &> /dev/null
    local EXIT_STATUS=$?
    if [ $EXIT_STATUS -ne 0 ]; then
        echo 'no'
    else
        echo 'yes'
    fi
}

# Shell history in SQLite
# eval "$(atuin init zsh --disable-up-arrow)"
eval "$(mcfly init zsh)"


llm_chat() {
    LLM_CHAT_MODEL='llama3'  # alternate: mistral
    $PYENV_ROOT/versions/ollama/bin/python -c "import sys, ollama; prompt = ' '.join(sys.argv[1:]); res = ollama.chat(model='$LLM_CHAT_MODEL', messages=[{'role': 'user', 'content': prompt}]); print(res['message']['content'])" $*
}

alias llm_py='/opt/pyenv/versions/ollama/bin/ipython --profile llm'

# review_code() {
#     path=$1
#     lang=$(/usr/bin/python3 -c "print('$path'.rsplit('.',1)[1])")
#     code=$(/bin/cat $path)
#     llm_prompt_prefix='Review the following code and make concise suggestions:
#
# ```'
#     llm_prompt_suffix='```'
#     llm_prompt="$llm_prompt_prefix$lang\n$code\n$llm_prompt_suffix"
#     echo $llm_prompt
# }
